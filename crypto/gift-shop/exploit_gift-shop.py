
# Exploit gift-shop
# Author: Sudoite


from pwn import *
from binascii import hexlify
remote = False
if remote:
    p = process('localhost', 5000)
else:
    p = process('python3 ./server.py', shell=True)


def run_menu_encrypt(input_a, input_b):
    p.send("1\n")
    p.recvuntil("Enter input_a: ")
    p.send(input_a + b"\n")
    p.recvuntil("Enter input_b: ")
    p.send(input_b + b"\n")
    #p.interactive()
    p.recvuntil("A plane flies overhead flying a banner that reads: ")
    ct = p.recvuntil("\n").strip()[:-1]
    #print(str(ct.__class__))
    #print(len(ct))
    print(b"The ciphertext is " + ct)
    p.recvuntil("> ")
    return ct

def run_menu_decrypt(ct):
    p.send("2\n")
    p.recvuntil("Enter the base64-encoded ciphertext to decrypt: ")
    p.send(ct + b"\n")
    p.interactive()

p.recvuntil("> ")


def compare(ct1, ct2):
    #ct1 = base64.b64decode(ct1)
    #ct2 = base64.b64decode(ct2)
    for i in range(len(ct1)//16):
        print("i = " + str(i) + "\n")
        print(hexlify(ct1[i*16:(i*16+16)]))
        print(hexlify(ct2[i*16:(i*16+16)]))
        print("")

def manipulate_ct(ct, block_index_to_duplicate):
    print("ciphertext: " + str(ct))
    print("block index = " + str(block_index_to_duplicate))
    print("length of ciphertext: " + str(len(ct)))
    if len(ct)%16 ==0:
        n_blocks = len(ct)//16
    else:
        print("Error in manipulating ciphertext: length is not a multiple of 16.")
        exit(0)
    ct_index = 0
    new_ct = ct[:-16]
    print("Looking at indices: " + str(16*block_index_to_duplicate))
    print("Looking at indices: " + str(16+16*block_index_to_duplicate))
    print(b"Looking at data: " + ct[(16*block_index_to_duplicate):(16+16*block_index_to_duplicate)])
    new_ct += ct[(16*block_index_to_duplicate):(16+16*block_index_to_duplicate)]
    print(b"Old ciphertext: " + ct)
    print(b"New ciphertext: " + new_ct)
    compare(ct, new_ct)
    return new_ct



a_len = 25
b_len = 3
# Produces padding of 16





for i in range(1):
    ct = run_menu_encrypt(b"a"*a_len, b"b"*b_len)
    print(ct)
    #print(b"ct = " + ct)
    #print(b"ct decoded = " + base64.b64decode(ct))
    new_ct = base64.b64encode(manipulate_ct(base64.b64decode(ct), block_index_to_duplicate=4))
    run_menu_decrypt(new_ct)



p.interactive()