from requests import Session
from Crypto.Util.number import *
from Crypto.Util.Padding import pad
from pwn import xor
import secrets, string, random, base64
from urllib.parse import unquote

URL = "http://localhost:8000"
s = Session()

def encrypt(x):
    s.post(f"{URL}/login", data={"username": x.decode()})
    tag, nonce, ct = s.cookies['auth'].split(".")
    return base64.b64decode(unquote(ct)), base64.b64decode(unquote(nonce))

def valid(iv, ct):
    cookie = f"{base64.b64encode(iv).decode()}.{base64.b64encode(ct).decode()}"
    return "admin" in s.get(f"{URL}/profile", cookies={"auth": cookie}).text

def counter(nonce, idx):
    assert len(nonce) == 12
    assert idx >= 1
    return nonce + long_to_bytes(idx, 4)

def guess(block, guess, nonce, idx):
    m = pad(b"|admin|", 16)
    iv = xor(m, counter(nonce, idx))
    return valid(iv, xor(block, guess))

def single(block, prefix, nonce, idx):
    assert len(prefix) == 15
    for c in string.ascii_lowercase + string.digits + "{}|_":
        if guess(block, prefix + c.encode(), nonce, idx):
            return c.encode()
    raise ValueError("Couldn't find anything")

def brk():
    flaglen = len(encrypt(b"a")[0]) - 1
    known = b"A" * 15
    take = 15
    blockidx = 0
    while len(known) < 15 + flaglen:
        if not take:
            take = 16
            blockidx += 1
        enc, nonce = encrypt(b"A" * take)
        take -= 1
        block = enc[blockidx*16:blockidx*16+16]
        known += single(block, known[-15:], nonce, blockidx + 2)
        print(known[15:].decode())
    return known[15:].decode()

if __name__ == "__main__":
    print(brk())
